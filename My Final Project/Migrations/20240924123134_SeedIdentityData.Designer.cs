// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Final_Project.Areas.Identity.Data;

#nullable disable

namespace My_Final_Project.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240924123134_SeedIdentityData")]
    partial class SeedIdentityData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("DirectorId", "MovieId");

                    b.ToTable("DirectorMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.HasKey("MovieId", "GenreId")
                        .HasName("PK__Genre_Mo__03ECA605F3AF6449");

                    b.HasIndex("GenreId");

                    b.ToTable("Genre_Movie", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("Actor_ID");

                    b.HasKey("MovieId", "ActorId")
                        .HasName("PK__Movie_Ac__B4DF443BA52AC0A3");

                    b.HasIndex("ActorId");

                    b.ToTable("Movie_Actor", (string)null);
                });

            modelBuilder.Entity("MovieDirector", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("Director_ID");

                    b.HasKey("MovieId", "DirectorId")
                        .HasName("PK__Movie_Di__791B9FCB5E6F89FE");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movie_Director", (string)null);
                });

            modelBuilder.Entity("MovieTag", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("Tag_ID");

                    b.HasKey("MovieId", "TagId")
                        .HasName("PK__Movie_Ta__5782C1C6B3634117");

                    b.HasIndex("TagId");

                    b.ToTable("Movie_Tag", (string)null);
                });

            modelBuilder.Entity("My_Final_Project.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("Date_of_Birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("Registration_Date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("userPhoto")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Users__206D91905A81CD68");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("My_Final_Project.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Actor_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Full_Name");

                    b.HasKey("ActorId")
                        .HasName("PK__Actors__E57403ED5B0C4E2A");

                    b.HasIndex("CountryId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("My_Final_Project.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Announcement_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("date")
                        .HasColumnName("Announcement_Date");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Short_Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Title");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Trailer_URL");

                    b.HasKey("AnnouncementId")
                        .HasName("PK__Announce__853AB7CF91279941");

                    b.HasIndex("MovieId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("My_Final_Project.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Award_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AwardId"));

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Award_Name");

                    b.Property<string>("AwardPhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Award_Photo_URL");

                    b.Property<int?>("AwardYear")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Award_Year");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.HasKey("AwardId")
                        .HasName("PK__Awards__30C01BCD528A7834");

                    b.HasIndex("MovieId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("My_Final_Project.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("City_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("City_Name");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.HasKey("CityId")
                        .HasName("PK__Cities__DE9DE0209382E0F6");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("My_Final_Project.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Comment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Comment_Text");

                    b.Property<int?>("Likes")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Comment_ID");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("Publication_Date");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("Review_ID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_ID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__99FC143B9CCE4679");

                    b.HasIndex("MovieId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("My_Final_Project.Models.ContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Content_Type_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTypeId"));

                    b.Property<string>("ContentTypeName")
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Content_Type_Name");

                    b.HasKey("ContentTypeId")
                        .HasName("PK__Content___33E2D62219ACA25C");

                    b.ToTable("Content_Type");
                });

            modelBuilder.Entity("My_Final_Project.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Country_Name");

                    b.Property<string>("FlagImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Flag_Image");

                    b.HasKey("CountryId")
                        .HasName("PK__Countrie__8036CB4EEFC4EE01");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("My_Final_Project.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Director_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Full_Name");

                    b.HasKey("DirectorId")
                        .HasName("PK__Director__3939BCE1696F064B");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("My_Final_Project.Models.Download", b =>
                {
                    b.Property<int>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Download_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DownloadId"));

                    b.Property<DateTime?>("DownloadDate")
                        .HasColumnType("date")
                        .HasColumnName("Download_Date");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_ID");

                    b.HasKey("DownloadId")
                        .HasName("PK__Download__423297A7C412C268");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("My_Final_Project.Models.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Episode_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int?>("EpisodeNumber")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Episode_Number");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("File_URL");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Release_Date");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Short_Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("EpisodeId")
                        .HasName("PK__Episodes__5ABD44031620DA0D");

                    b.HasIndex("MovieId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("My_Final_Project.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Favorite_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_ID");

                    b.HasKey("FavoriteId")
                        .HasName("PK__Favorite__749FA5A71BA754A0");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("My_Final_Project.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Genre_Name");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__964A2006799799D3");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("My_Final_Project.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Content_Type_ID");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("Country_ID");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Cover_Image_URL");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Currency");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("date")
                        .HasColumnName("Date_Added");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("End_Date");

                    b.Property<bool?>("IsFinished")
                        .IsRequired()
                        .HasColumnType("BIT")
                        .HasColumnName("IsFinished");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("ReleasedEpisodes")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Released_Episodes");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Short_Description");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("Start_Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Title");

                    b.Property<int?>("TotalEpisodes")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Total_Episodes");

                    b.HasKey("MovieId")
                        .HasName("PK__Movies__7A880405F20AA26B");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CountryId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("My_Final_Project.Models.MovieFragment", b =>
                {
                    b.Property<int>("FragmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Fragment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FragmentId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Image_URL");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.HasKey("FragmentId")
                        .HasName("PK__Movie_Fr__D36055D2EC26CF7B");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Fragments");
                });

            modelBuilder.Entity("My_Final_Project.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Rating_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<double?>("RatingCount")
                        .IsRequired()
                        .HasColumnType("float")
                        .HasColumnName("Rating_Count");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("date")
                        .HasColumnName("Rating_Date");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_ID");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__BE48C8253983175E");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("My_Final_Project.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Review_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("Likes")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("Publication_Date");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Review_Text");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("User_ID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__F85DA7EB44FDD2ED");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("My_Final_Project.Models.RolesActor", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int?>("ActorId")
                        .HasColumnType("int")
                        .HasColumnName("Actor_ID");

                    b.Property<string>("ActorPhotoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Actor_Photo_URL");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_ID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Role_Name");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles_Ac__D80AB49B70635F5D");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Roles_Actors");
                });

            modelBuilder.Entity("My_Final_Project.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tag_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)")
                        .HasColumnName("Tag_Name");

                    b.HasKey("TagId")
                        .HasName("PK__Tags__D0AC5C33A5E8C8DB");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("My_Final_Project.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK__Genre_Mov__Genre__5FB337D6");

                    b.HasOne("My_Final_Project.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Genre_Mov__Movie__5EBF139D");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.HasOne("My_Final_Project.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Act__Actor__403A8C7D");

                    b.HasOne("My_Final_Project.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Act__Movie__3F466844");
                });

            modelBuilder.Entity("MovieDirector", b =>
                {
                    b.HasOne("My_Final_Project.Models.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Dir__Direc__440B1D61");

                    b.HasOne("My_Final_Project.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Dir__Movie__4316F928");
                });

            modelBuilder.Entity("MovieTag", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Tag__Movie__5AEE82B9");

                    b.HasOne("My_Final_Project.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__Movie_Tag__Tag_I__5BE2A6F2");
                });

            modelBuilder.Entity("My_Final_Project.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("My_Final_Project.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Users__Country_I__300424B4");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Final_Project.Models.Actor", b =>
                {
                    b.HasOne("My_Final_Project.Models.Country", "Country")
                        .WithMany("Actors")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Actors__Country___2A4B4B5E");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Final_Project.Models.Announcement", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Announcements")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Announcem__Movie__3C69FB99");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("My_Final_Project.Models.Award", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Awards")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Awards__Movie_ID__693CA210");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("My_Final_Project.Models.City", b =>
                {
                    b.HasOne("My_Final_Project.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Cities__Country___2D27B809");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Final_Project.Models.Comment", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Comments__Movie___534D60F1");

                    b.HasOne("My_Final_Project.Models.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comments__Parent__5535A963");

                    b.HasOne("My_Final_Project.Models.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK__Comments__Review__5629CD9C");

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comments__User_I__5441852A");

                    b.Navigation("Movie");

                    b.Navigation("ParentComment");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Final_Project.Models.Download", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Downloads")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Downloads__Movie__46E78A0C");

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Downloads")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Downloads__User___47DBAE45");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Final_Project.Models.Episode", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Episodes__Movie___398D8EEE");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("My_Final_Project.Models.Favorite", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Favorites__Movie__5812160E");

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Favorites__User___571DF1D5");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Final_Project.Models.Movie", b =>
                {
                    b.HasOne("My_Final_Project.Models.ContentType", "ContentType")
                        .WithMany("Movies")
                        .HasForeignKey("ContentTypeId")
                        .HasConstraintName("FK__Movies__Content___37A5467C");

                    b.HasOne("My_Final_Project.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Movies__Country__36B12243");

                    b.Navigation("ContentType");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Final_Project.Models.MovieFragment", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("MovieFragments")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Movie_Fra__Movie__628FA481");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("My_Final_Project.Models.Rating", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Ratings__Movie_I__4AB81AF0");

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Ratings__User_ID__4BAC3F29");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Final_Project.Models.Review", b =>
                {
                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Reviews__Movie_I__4F7CD00D");

                    b.HasOne("My_Final_Project.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__User_ID__5070F446");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Final_Project.Models.RolesActor", b =>
                {
                    b.HasOne("My_Final_Project.Models.Actor", "Actor")
                        .WithMany("RolesActors")
                        .HasForeignKey("ActorId")
                        .HasConstraintName("FK__Roles_Act__Actor__656C112C");

                    b.HasOne("My_Final_Project.Models.Movie", "Movie")
                        .WithMany("RolesActors")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Roles_Act__Movie__66603565");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("My_Final_Project.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Downloads");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("My_Final_Project.Models.Actor", b =>
                {
                    b.Navigation("RolesActors");
                });

            modelBuilder.Entity("My_Final_Project.Models.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("My_Final_Project.Models.ContentType", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("My_Final_Project.Models.Country", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Cities");

                    b.Navigation("Movies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("My_Final_Project.Models.Movie", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Awards");

                    b.Navigation("Comments");

                    b.Navigation("Downloads");

                    b.Navigation("Episodes");

                    b.Navigation("Favorites");

                    b.Navigation("MovieFragments");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("RolesActors");
                });

            modelBuilder.Entity("My_Final_Project.Models.Review", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
